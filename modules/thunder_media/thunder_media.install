<?php

/**
 * @file
 * Contains.
 */

use \Drupal\views\Entity\View;
use \Drupal\entity_browser\Entity\EntityBrowser;
use \Drupal\user\Entity\Role;
use \Drupal\field\Entity\FieldConfig;
use \Drupal\Core\Entity\Entity\EntityViewDisplay;

/**
 * Update hook dependencies.
 *
 * 1. Dependency on Thunder Updater module.
 *
 * @return mixed
 *   Returns list of update hook dependencies.
 */
function thunder_media_update_dependencies() {

  $installThunderUpdaterHook = ['thunder' => 8103];

  $dependencies['thunder_media'] = [
    8002 => $installThunderUpdaterHook,
    8003 => $installThunderUpdaterHook,
    8004 => $installThunderUpdaterHook,
    8005 => $installThunderUpdaterHook,
    8006 => $installThunderUpdaterHook,
    8007 => $installThunderUpdaterHook,
    8008 => $installThunderUpdaterHook,
    8009 => $installThunderUpdaterHook,
    8010 => $installThunderUpdaterHook,
    8011 => $installThunderUpdaterHook,
    8012 => $installThunderUpdaterHook,
    8013 => $installThunderUpdaterHook,
    8101 => $installThunderUpdaterHook,
  ];

  return $dependencies;
}

/**
 * Rename config object.
 */
function thunder_media_update_8001() {

  \Drupal::configFactory()
    ->getEditable('thunder_media.settings')
    ->setData(\Drupal::configFactory()
      ->get('thunder_media.configuration')
      ->getRawData())
    ->save();
}

/**
 * Change media_thumbnail image style.
 */
function thunder_media_update_8002() {

  // List of configurations that should be checked for existence.
  $expectedConfig['effects']['8a41a5b5-469d-4918-879e-460f26e08700']['data']['width'] = 241;
  $expectedConfig['effects']['8a41a5b5-469d-4918-879e-460f26e08700']['data']['height'] = 138;
  $expectedConfig['effects']['8a41a5b5-469d-4918-879e-460f26e08700']['id'] = 'focal_point_scale_and_crop';

  // New configuration that should be applied.
  $newConfig['effects']['8a41a5b5-469d-4918-879e-460f26e08700']['data']['width'] = 182;
  $newConfig['effects']['8a41a5b5-469d-4918-879e-460f26e08700']['data']['height'] = 104;

  \Drupal::service('thunder_updater')
    ->updateConfig('image.style.media_thumbnail', $newConfig, $expectedConfig);
}

/**
 * Add entity browser view sorting.
 */
function thunder_media_update_8003() {

  $sorting = [
    'created' =>
      [
        'id' => 'created',
        'table' => 'media_field_data',
        'field' => 'created',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'order' => 'DESC',
        'exposed' => FALSE,
        'expose' =>
          [
            'label' => '',
          ],
        'granularity' => 'second',
        'entity_type' => 'media',
        'entity_field' => 'created',
        'plugin_id' => 'date',
      ],
  ];

  $browsers = ['image_browser', 'media_browser', 'gallery_browser'];

  foreach ($browsers as $browser) {
    /** @var \Drupal\views\Entity\View $view */
    $view = View::load($browser);

    if (!empty($view) && empty($view->getDisplay('default')['display_options']['sorts'])) {
      $view->getDisplay('default')['display_options']['sorts'] = $sorting;
      $view->save();
    }
  }
}

/**
 * Enable auto_open for gallery browser.
 */
function thunder_media_update_8004() {
  // List of configurations that should be checked for existence. We are trying
  // to ensure, that active display settings are provided by our configuration.
  $expectedConfig['display_configuration']['width'] = '1070';
  $expectedConfig['display_configuration']['height'] = '';
  $expectedConfig['display_configuration']['link_text'] = 'Select entities';

  // This option is introduced with new version of entity browser module, so
  // it didn't exist before, because of that it's not possible to check
  // existing configuration value for this property.
  $configsToUpdate['display_configuration']['auto_open'] = TRUE;

  \Drupal::service('thunder_updater')
    ->updateEntityBrowserConfig('gallery_browser', $configsToUpdate, $expectedConfig);
}

/**
 * Update dropzonejs widget file extension filtering for images.
 */
function thunder_media_update_8005() {
  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  // List of expected configuration for listed entity browsers.
  $expectedConfig['multiple_image_browser']['widgets']['89532aea-140d-4b9e-96f4-2aa489c095cb']['settings']['extensions'] = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';
  $expectedConfig['image_browser']['widgets']['e6bbb585-adb6-4023-aece-e73d893491c9']['settings']['extensions'] = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';
  $expectedConfig['media_browser']['widgets']['ec1759ab-e969-4448-a9db-d3a70e123326']['settings']['extensions'] = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';

  // New configuration for entity browsers that should be applied.
  $newConfig['multiple_image_browser']['widgets']['89532aea-140d-4b9e-96f4-2aa489c095cb']['settings']['extensions'] = 'png gif jpg jpeg';
  $newConfig['image_browser']['widgets']['e6bbb585-adb6-4023-aece-e73d893491c9']['settings']['extensions'] = 'png gif jpg jpeg';
  $newConfig['media_browser']['widgets']['ec1759ab-e969-4448-a9db-d3a70e123326']['settings']['extensions'] = 'png gif jpg jpeg';

  foreach ($newConfig as $browser => $configuration) {

    if (\Drupal::service('thunder_updater')
      ->updateEntityBrowserConfig($browser, $configuration, $expectedConfig[$browser])
    ) {

      $message = t('Image extensions filtering for "@configName" has been updated.', [
        '@configName' => 'entity_browser.browser.' . $browser,
      ]);

      $updateLogger->info($message);
    }
    else {
      $message = t('Image extensions filtering for "@configName" was not updated. Please ensure that file extensions are set to "@newExtensions" for upload image widget.', [
        '@configName' => 'entity_browser.browser.' . $browser,
        '@newExtensions' => 'png gif jpg jpeg',
      ]);

      $updateLogger->warning($message);
    }
  }

  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}

/**
 * Enable auto_select on multiple_image_browser.
 */
function thunder_media_update_8006() {
  // Ensure that defined widgets exist, in other case wrong configuration could
  // be generated. It's not possible to check for existing value of updated
  // configuration, because it's introduced with new entity browser
  // functionality for auto select of entities in view and dropzonejs widgets.
  // We are checking only that widgets previously provided by configuration are
  // still exist and only they will be updated.
  $expectedConfig['widgets']['7d7f8f45-f628-48a3-84a8-c962c73f39e8']['uuid'] = '7d7f8f45-f628-48a3-84a8-c962c73f39e8';
  $expectedConfig['widgets']['89532aea-140d-4b9e-96f4-2aa489c095cb']['uuid'] = '89532aea-140d-4b9e-96f4-2aa489c095cb';

  // New configuration that should be applied.
  $newConfig['widgets']['7d7f8f45-f628-48a3-84a8-c962c73f39e8']['settings']['auto_select'] = TRUE;
  $newConfig['widgets']['89532aea-140d-4b9e-96f4-2aa489c095cb']['settings']['auto_select'] = TRUE;

  \Drupal::service('thunder_updater')
    ->updateEntityBrowserConfig('multiple_image_browser', $newConfig, $expectedConfig);
}

/**
 * Make instagrams responsive.
 */
function thunder_media_update_8007() {
  // List of configurations that should be checked for existence.
  $expectedConfig['content']['field_url']['settings']['width'] = 480;
  $expectedConfig['content']['field_url']['settings']['height'] = 640;

  // New configuration that should be applied.
  $newConfig['content']['field_url']['settings']['width'] = NULL;
  $newConfig['content']['field_url']['settings']['height'] = NULL;

  \Drupal::service('thunder_updater')
    ->updateConfig('core.entity_view_display.media.instagram.default', $newConfig, $expectedConfig);
}

/**
 * New image style for entity browser.
 */
function thunder_media_update_8008() {

  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = \Drupal::service('logger.thunder_update');

  /** @var \Drupal\thunder_media\Updater $mediaUpdater */
  $mediaUpdater = \Drupal::service('thunder_updater');

  \Drupal::service('module_installer')->install([
    'config_update',
  ]);

  // List of expected configuration for listed entity browser views.
  $expectedConfig['image_browser']['display']['default']['display_options']['fields']['thumbnail__target_id']['settings']['image_style'] = 'media_thumbnail';
  $expectedConfig['media_browser']['display']['default']['display_options']['fields']['thumbnail__target_id']['settings']['image_style'] = 'media_thumbnail';
  $expectedConfig['gallery_browser']['display']['default']['display_options']['fields']['thumbnail__target_id']['settings']['image_style'] = 'media_thumbnail';

  // New configuration for entity browser views that should be applied.
  $newConfig['image_browser']['display']['default']['display_options']['fields']['thumbnail__target_id']['settings']['image_style'] = 'entity_browser_thumbnail';
  $newConfig['media_browser']['display']['default']['display_options']['fields']['thumbnail__target_id']['settings']['image_style'] = 'entity_browser_thumbnail';
  $newConfig['gallery_browser']['display']['default']['display_options']['fields']['thumbnail__target_id']['settings']['image_style'] = 'entity_browser_thumbnail';

  try {
    \Drupal::service('config_update.config_update')
      ->import('image_style', 'entity_browser_thumbnail');

    $message = t('New image style entity_browser_thumbnail created.');
    $updateLogger->info($message);

    foreach ($newConfig as $view => $configuration) {
      if ($mediaUpdater->updateConfig('views.view.' . $view, $configuration, $expectedConfig[$view])) {
        $message = t('View "@view" is now using image style entity_browser_thumbnail.', [
          '@view' => $view,
        ]);
        $updateLogger->info($message);
      }
    }
  }
  catch (\Exception $e) {
    $message = t('Image style entity_browser_thumbnail was not created.');

    $updateLogger->warning($message);
  }

  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}

/**
 * Set required fields for Image and Video bundles.
 */
function thunder_media_update_8009() {

  // List of expected configurations that should be checked.
  $expectedConfig['field.field.media.image.field_image']['required'] = FALSE;
  $expectedConfig['field.field.media.video.field_media_video_embed_field']['required'] = FALSE;

  // Config for required Video and Image media fields.
  $configsToUpdate['field.field.media.image.field_image']['required'] = TRUE;
  $configsToUpdate['field.field.media.video.field_media_video_embed_field']['required'] = TRUE;

  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  /** @var \Drupal\thunder_media\Updater $mediaUpdater */
  $mediaUpdater = \Drupal::service('thunder_updater');

  // Check that gallery paragraph uses complex widget.
  foreach ($configsToUpdate as $configName => $newConfig) {
    if (!$mediaUpdater->updateConfig($configName, $newConfig, $expectedConfig[$configName])) {
      $updateLogger->warning(t('Unable to set field "@configName" as required.', ['@configName' => $configName]));
    }
  }

  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}

/**
 * Activate support for responsive images with Blazy.
 */
function thunder_media_update_8010() {
  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  /** @var \Drupal\thunder_media\Updater $mediaUpdater */
  $mediaUpdater = \Drupal::service('thunder_updater');

  // Import image styles.
  \Drupal::service('module_installer')->install([
    'config_update',
  ]);

  try {
    $configUpdater = \Drupal::service('config_update.config_update');

    $configUpdater->import('responsive_image_style', 'media_image');
    $configUpdater->import('image_style', 'media_image_tablet');
    $configUpdater->import('image_style', 'media_image_mobile');
    $configUpdater->import('slick', 'thunder_gallery');
  }
  catch (\Exception $e) {
    $message = t('Responsive image styles was not created.');

    $updateLogger->warning($message);
  }

  // Expected settings for blazy module.
  $expectedBlazySettings['responsive_image'] = FALSE;

  // New settings for blazy module.
  $newBlazySettings['responsive_image'] = TRUE;

  if (\Drupal::moduleHandler()->moduleExists('blazy')
    && \Drupal::moduleHandler()->moduleExists('responsive_image')
    && $mediaUpdater->updateConfig('blazy.settings', $newBlazySettings, $expectedBlazySettings)
  ) {
    $updateLogger->info('The support for responsive images was activated in the Blazy settings.');
  }

  // Expected configurations for required Video and Image media fields.
  $expectedConfigs['core.entity_view_display.media.image.default']['content']['field_image']['settings']['image_style'] = 'media_image';
  $expectedConfigs['core.entity_view_display.media.image.default']['content']['field_image']['settings']['responsive_image_style'] = '';
  $expectedConfigs['core.entity_view_display.media.gallery.default']['content']['field_media_images']['settings']['optionset'] = 'default';
  $expectedConfigs['core.entity_view_display.media.image.slick']['content']['field_image']['settings']['image_style'] = 'gallery';
  $expectedConfigs['core.entity_view_display.media.image.slick']['content']['field_image']['settings']['responsive_image_style'] = '';
  $expectedConfigs['image.style.media_image']['effects']['21ef239e-0d92-4fcc-84fc-17f4da42ae2f']['data']['width'] = 925;
  $expectedConfigs['image.style.media_image']['effects']['21ef239e-0d92-4fcc-84fc-17f4da42ae2f']['data']['height'] = 520;

  // Config for required Video and Image media fields.
  $newConfigs['core.entity_view_display.media.image.default']['content']['field_image']['settings']['image_style'] = '';
  $newConfigs['core.entity_view_display.media.image.default']['content']['field_image']['settings']['responsive_image_style'] = 'media_image';
  $newConfigs['core.entity_view_display.media.gallery.default']['content']['field_media_images']['settings']['optionset'] = 'thunder_gallery';
  $newConfigs['core.entity_view_display.media.image.slick']['content']['field_image']['settings']['image_style'] = '';
  $newConfigs['core.entity_view_display.media.image.slick']['content']['field_image']['settings']['responsive_image_style'] = 'media_image';
  $newConfigs['image.style.media_image']['effects']['21ef239e-0d92-4fcc-84fc-17f4da42ae2f']['data']['width'] = 938;
  $newConfigs['image.style.media_image']['effects']['21ef239e-0d92-4fcc-84fc-17f4da42ae2f']['data']['height'] = 527;

  foreach ($newConfigs as $configName => $newConfig) {
    if (!$mediaUpdater->updateConfig($configName, $newConfig, $expectedConfigs[$configName])) {
      $updateLogger->warning(t('Unable to update configuration for "@configName".', ['@configName' => $configName]));
    }
  }

  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}

/**
 * Remove "auto_select" from EB widget config, for those who don't support it.
 */
function thunder_media_update_8011() {

  /** @var EntityBrowser[] $browsers */
  $browsers = EntityBrowser::loadMultiple();
  foreach ($browsers as $browser) {
    $config = Drupal::configFactory()->getEditable('entity_browser.browser.' . $browser->getConfigTarget());
    foreach ($browser->getWidgets() as $id => $widget) {
      if (!$widget->getPluginDefinition()['auto_select']) {
        $config->clear('widgets.' . $id . '.settings.auto_select');
      }
    }
    $config->save();
  }
}

/**
 * Change preview image style for image media bundle to "medium" image style.
 */
function thunder_media_update_8012() {

  // List of configurations that should be checked for existence.
  $expectedConfig['content']['field_image']['settings']['preview_image_style'] = 'thumbnail';

  // New configuration that should be applied.
  $newConfig['content']['field_image']['settings']['preview_image_style'] = 'medium';

  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = \Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  // Execute update of config with additional validation of existing config.
  $updateExecuted = \Drupal::service('thunder_updater')
    ->updateConfig('core.entity_form_display.media.image.default', $newConfig, $expectedConfig);

  // Log result of update.
  if ($updateExecuted) {
    $updateLogger->info(t('Preview image style for image media bundle is successfully updated.'));
  }
  else {
    $updateLogger->warning(t('Unable to change preview image style for image media bundle.'));
  }

  // Output collected update log for Drush update command.
  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  // Output collected update log for UI update script.
  return $updateLogger->outputHtml();
}

/**
 * Import slick media display view configuration.
 */
function thunder_media_update_8013() {
  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = \Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  /** @var \Drupal\Core\Config\StorageInterface $configStorage */
  $configStorage = \Drupal::service('config.storage');

  if ($configStorage->exists('core.entity_view_display.media.image.slick')) {
    $updateLogger->info(t('Configuration already exists.'));
  }
  else {
    // Enable "config_update" module.
    \Drupal::service('module_installer')->install(['config_update']);

    /** @var \Drupal\config_update\ConfigRevertInterface $configUpdater */
    $configUpdater = \Drupal::service('config_update.config_update');

    try {
      $configUpdater->import('entity_view_display', 'media.image.slick');

      $updateLogger->info(t('Configuration successfully imported.'));
    }
    catch (\Exception $e) {
      $updateLogger->warning(t('Unable to import configuration: core.entity_view_display.media.image.slick.yml.'));
    }
  }

  // Output collected update log for Drush update command.
  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  // Output collected update log for UI update script.
  return $updateLogger->outputHtml();
}

/*** 81xx Thunder Media update patches ***/

/**
 * Remove "Language" filter from media browsers.
 */
function thunder_media_update_8101() {
  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  /** @var \Drupal\thunder_updater\Updater $thunderUpdater */
  $thunderUpdater = \Drupal::service('thunder_updater');

  // Perform removal of language filters from relevant views.
  $successfulUpdate = TRUE;
  $viewIds = ['image_browser', 'media_browser'];

  foreach ($viewIds as $viewId) {
    /** @var \Drupal\views\Entity\View $view */
    $view = View::load($viewId);
    if (!empty($view) && !empty($view->getDisplay('default')['display_options']['filters']['langcode'])) {
      unset($view->getDisplay('default')['display_options']['filters']['langcode']);
      $view->save();

      $updateLogger->info(t('Language filter for media browser view "@view_id" is removed.', ['@view_id' => $viewId]));
    }
    else {
      $successfulUpdate = FALSE;

      $updateLogger->warning(t('Unable to remove Language filter for media browser view: @view_id.', ['@view_id' => $viewId]));
    }
  }

  // If update is successful for all views, then check entry in checklist.
  if ($successfulUpdate) {
    $thunderUpdater->markUpdatesSuccessful(['v1_1__remove_entity_browser_language_filter']);
  }
  else {
    $updateLogger->warning(t('Unable to remove language filters from views. Please perform this process manually.'));
    $thunderUpdater->markUpdatesFailed(['v1_1__remove_entity_browser_language_filter']);
  }

  // Output log result depending on channel used for update execution.
  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}

/**
 * Introduce image and video paragraph.
 */
function thunder_media_update_8102() {

  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  \Drupal::service('module_installer')->install([
    'config_update',
  ]);

  $configUpdater = \Drupal::service('config_update.config_update');

  $imports = [
    'paragraphs_type' => ['image', 'video'],
    'field_storage_config' => ['paragraph.field_image', 'paragraph.field_video'],
    'field_config' => [
      'paragraph.image.field_image',
      'paragraph.video.field_video',
    ],
    'view' => ['video_browser'],
    'system.simple' => ['entity_browser.browser.video_browser'],
    'entity_form_display' => [
      'paragraph.video.default',
      'paragraph.image.default',
    ],
    'entity_view_display' => [
      'paragraph.video.default',
      'paragraph.image.default',
      'paragraph.image.preview',
      'paragraph.video.preview',
    ],
  ];

  $error = FALSE;
  foreach ($imports as $type => $entities) {
    foreach ($entities as $entity) {
      try {
        $configUpdater->import($type, $entity);
      }
      catch (\Exception $e) {
        $error = TRUE;
        $updateLogger->warning(t('Unable to import config: @type -> @entity', ['@type' => $type, '@entity' => $entity]));
      }
    }
  }

  /** @var \Drupal\thunder_updater\Updater $thunderUpdater */
  $thunderUpdater = \Drupal::service('thunder_updater');

  if (!$error) {
    /** @var \Drupal\user\Entity\Role[] $roles */
    $roles = Role::loadMultiple(['editor', 'seo']);
    foreach ($roles as $role) {
      $role->grantPermission('access video_browser entity browser pages');
      $role->save();
    }

    $fieldConfigs = [
      'node.article.field_paragraphs',
      'taxonomy_term.channel.field_paragraphs',
      'taxonomy_term.tag.field_paragraphs',
    ];
    foreach ($fieldConfigs as $fieldConfig) {

      /** @var \Drupal\field\Entity\FieldConfig $field */
      $field = FieldConfig::load($fieldConfig);
      if ($field) {
        $settings = $field->getSetting('handler_settings');
        $settings['target_bundles']['image'] = 'image';
        $settings['target_bundles']['video'] = 'video';
        $settings['target_bundles_drag_drop']['image'] = ['enabled' => TRUE, 'weight' => 10];
        $settings['target_bundles_drag_drop']['video'] = ['enabled' => TRUE, 'weight' => 10];

        $field->setSetting('handler_settings', $settings);
        $field->save();
      }
      else {
        $error = TRUE;
      }
    }

    // List of expected configuration for listed entity browsers.
    $expectedConfig['display_configuration']['link_text'] = 'Select entities';
    $expectedConfig['widgets']['f09e2255-6bd8-4301-ba02-1d446f7fca70']['settings']['submit_text'] = 'Select entities';
    // New configuration for entity browsers that should be applied.
    $newConfig['display_configuration']['link_text'] = 'Select image';
    $newConfig['widgets']['f09e2255-6bd8-4301-ba02-1d446f7fca70']['settings']['submit_text'] = 'Select image';
    if ($thunderUpdater->updateEntityBrowserConfig('image_browser', $newConfig, $expectedConfig)) {
      $thunderUpdater->markUpdatesSuccessful(['v1_1__image_video_paragraph'], FALSE);
    }
    else {
      $error = TRUE;
    }
  }

  if ($error) {
    $thunderUpdater->markUpdatesFailed(['v1_1__image_video_paragraph']);
  }

  // Output log result depending on channel used for update execution.
  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}

/**
 * Adjust instagrams preview in backend.
 */
function thunder_media_update_8103() {

  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  // List of configurations that should be checked for existence.
  $expectedConfig['hidden']['thumbnail'] = TRUE;
  $expectedConfig['content']['field_url'] = [
    'type' => 'instagram_embed',
    'weight' => 0,
    'region' => 'content',
    'label' => 'hidden',
    'settings' => [
      'width' => 241,
      'height' => 313,
    ],
    'third_party_settings' => [],
  ];

  // New configuration that should be applied.
  $newConfig['content']['thumbnail'] = [
    'type' => 'image',
    'weight' => 0,
    'region' => 'content',
    'label' => 'hidden',
    'settings' => [
      'image_style' => 'media_thumbnail',
      'image_link' => '',
    ],
    'third_party_settings' => [],
  ];

  $thunderUpdater = \Drupal::service('thunder_updater');
  if ($thunderUpdater->updateConfig('core.entity_view_display.media.instagram.thumbnail', $newConfig, $expectedConfig)) {
    $display = EntityViewDisplay::load('media.instagram.thumbnail');
    $display->removeComponent('field_url')
      ->save();
    $thunderUpdater->markUpdatesSuccessful(['v1_1__instagram_edit_preview']);

  }
  else {
    $updateLogger->warning(t('Unable to adjust core.entity_view_display.media.instagram.thumbnail config'));
    $thunderUpdater->markUpdatesFailed(['v1_1__instagram_edit_preview']);
  }

  // Output log result depending on channel used for update execution.
  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}
