<?php

/**
 * @file
 * Contains.
 */

use \Drupal\Component\Utility\NestedArray;
use \Drupal\image\Entity\ImageStyle;
use \Drupal\views\Entity\View;

/**
 * Rename config object.
 */
function thunder_media_update_8001() {

  \Drupal::configFactory()
    ->getEditable('thunder_media.settings')
    ->setData(\Drupal::configFactory()
      ->get('thunder_media.configuration')
      ->getRawData())
    ->save();
}

/**
 * Change media_thumbnail image style.
 */
function thunder_media_update_8002() {

  $imageStyle = ImageStyle::load('media_thumbnail');
  if ($imageStyle) {
    /** @var \Drupal\image\ConfigurableImageEffectBase $effect */
    foreach ($imageStyle->getEffects() as $effect) {
      $config = $effect->getConfiguration();
      if ($config['id'] == 'focal_point_scale_and_crop' && $config['data']['width'] == 241 && $config['data']['height'] == 138) {
        $config['data']['width'] = 182;
        $config['data']['height'] = 104;
        $effect->setConfiguration($config);
      }
    }

    $imageStyle->save();
  }
}

/**
 * Add entity browser view sorting.
 */
function thunder_media_update_8003() {

  $sorting = [
    'created' =>
      [
        'id' => 'created',
        'table' => 'media_field_data',
        'field' => 'created',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'order' => 'DESC',
        'exposed' => FALSE,
        'expose' =>
          [
            'label' => '',
          ],
        'granularity' => 'second',
        'entity_type' => 'media',
        'entity_field' => 'created',
        'plugin_id' => 'date',
      ],
  ];

  $browsers = ['image_browser', 'media_browser', 'gallery_browser'];

  foreach ($browsers as $browser) {
    /** @var \Drupal\views\Entity\View $view */
    $view = View::load($browser);

    if (!empty($view) && empty($view->getDisplay('default')['display_options']['sorts'])) {
      $view->getDisplay('default')['display_options']['sorts'] = $sorting;
      $view->save();
    }
  }
}

/**
 * Enable auto_open for gallery browser.
 */
function thunder_media_update_8004() {
  $configsToUpdate['display_configuration']['auto_open'] = TRUE;

  \Drupal::service('thunder_media.updater')
    ->updateEntityBrowserConfig('gallery_browser', $configsToUpdate);
}

/**
 * Update dropzonejs widget file extension filtering for images.
 */
function thunder_media_update_8005() {
  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  $oldConfig['multiple_image_browser']['widgets']['89532aea-140d-4b9e-96f4-2aa489c095cb']['settings']['extensions'] = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';
  $oldConfig['image_browser']['widgets']['e6bbb585-adb6-4023-aece-e73d893491c9']['settings']['extensions'] = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';
  $oldConfig['media_browser']['widgets']['ec1759ab-e969-4448-a9db-d3a70e123326']['settings']['extensions'] = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';

  $configsToUpdate['multiple_image_browser']['widgets']['89532aea-140d-4b9e-96f4-2aa489c095cb']['settings']['extensions'] = 'png gif jpg jpeg';
  $configsToUpdate['image_browser']['widgets']['e6bbb585-adb6-4023-aece-e73d893491c9']['settings']['extensions'] = 'png gif jpg jpeg';
  $configsToUpdate['media_browser']['widgets']['ec1759ab-e969-4448-a9db-d3a70e123326']['settings']['extensions'] = 'png gif jpg jpeg';

  foreach ($configsToUpdate as $browser => $configuration) {

    if (\Drupal::service('thunder_media.updater')->updateEntityBrowserConfig($browser, $configuration, $oldConfig[$browser])) {

      $message = t('Image extensions filtering for "@configName" has been updated.', [
        '@configName' => 'entity_browser.browser.' . $browser,
      ]);

      $updateLogger->info($message);
    }
    else {
      $message = t('Image extensions filtering for "@configName" was not updated. Please ensure that file extensions are set to "@newExtensions" for upload image widget.', [
        '@configName' => 'entity_browser.browser.' . $browser,
        '@newExtensions' => 'png gif jpg jpeg',
      ]);

      $updateLogger->warning($message);
    }
  }

  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}

/**
 * Enable auto_select on multiple_image_browser.
 */
function thunder_media_update_8006() {
  $configsToUpdate['widgets']['7d7f8f45-f628-48a3-84a8-c962c73f39e8']['settings']['auto_select'] = TRUE;
  $configsToUpdate['widgets']['89532aea-140d-4b9e-96f4-2aa489c095cb']['settings']['auto_select'] = TRUE;

  \Drupal::service('thunder_media.updater')
    ->updateEntityBrowserConfig('multiple_image_browser', $configsToUpdate);
}

/**
 * Make instagrams responsive.
 */
function thunder_media_update_8007() {
  $config = \Drupal::configFactory()->getEditable('core.entity_view_display.media.instagram.default');

  if ($config && !empty($config->get('content.field_url.settings'))) {
    $config->set('content.field_url.settings.width', NULL);
    $config->set('content.field_url.settings.height', NULL);
    $config->save();
  }
}

/**
 * New image style for entity browser.
 */
function thunder_media_update_8008() {

  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = Drupal::service('logger.thunder_update');

  \Drupal::service('module_installer')->install([
    'config_update',
  ]);

  try {
    \Drupal::service('config_update.config_update')->import('image_style', 'entity_browser_thumbnail');

    $message = t('New image style entity_browser_thumbnail created.');
    $updateLogger->info($message);

    $browsers = ['image_browser', 'media_browser', 'gallery_browser'];

    foreach ($browsers as $browser) {

      $config = \Drupal::configFactory()->getEditable('views.view.' . $browser);

      if ($config) {

        $key = 'display.default.display_options.fields.thumbnail__target_id.settings.image_style';

        if ($config->get($key) == 'media_thumbnail') {
          $config->set($key, 'entity_browser_thumbnail');
          $config->save();

          $message = t('@browser is now using image style entity_browser_thumbnail.', [
            '@browser' => $browser,
          ]);
          $updateLogger->info($message);
        }
      }
    }
  }
  catch (\Exception $e) {
    $message = t('Image style entity_browser_thumbnail was not created.');

    $updateLogger->warning($message);
  }

  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}

/**
 * Set required fields for Image and Video bundles.
 */
function thunder_media_update_8009() {
  // Config for required Video and Image media fields.
  $configsToUpdate['field.field.media.image.field_image']['required'] = TRUE;
  $configsToUpdate['field.field.media.video.field_media_video_embed_field']['required'] = TRUE;

  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
  $configFactory = Drupal::service('config.factory');

  // Check that gallery paragraph uses complex widget.
  foreach ($configsToUpdate as $configName => $newConfig) {
    /** @var \Drupal\Core\Config\Config $paragraphConfig */
    $config = $configFactory->getEditable($configName);

    if (empty($config->getOriginal())) {
      $updateLogger->warning(t('Unable to set field "@configName" as required.', ['@configName' => $configName]));
    }
    else {
      $config->setData(NestedArray::mergeDeep($config->get(), $newConfig));
      $config->save();
    }
  }

  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}

/**
 * Activate support for responsive images with Blazy
 */
function thunder_media_update_8009() {
  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = Drupal::service('logger.thunder_update');

  if (\Drupal::moduleHandler()->moduleExists('blazy')
    && \Drupal::moduleHandler()->moduleExists('responsive_image')) {

    $config = \Drupal::configFactory()->getEditable('blazy.settings');
    if ($config) {
      $config->set('responsive_image', TRUE);
      $config->save();
      $updateLogger->info('The support for responsive images was activated in the Blazy settings.');
    }
  }

  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}