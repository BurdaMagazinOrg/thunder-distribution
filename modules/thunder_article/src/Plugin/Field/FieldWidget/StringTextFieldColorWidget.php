<?php

namespace Drupal\thunder_article\Plugin\Field\FieldWidget;

use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\Plugin\Field\FieldWidget\StringTextfieldWidget;
use Drupal\Core\Form\FormStateInterface;

/**
 * Plugin implementation of the 'string_textfield' widget.
 *
 * @FieldWidget(
 *   id = "string_textfield_color",
 *   label = @Translation("Textfield Color"),
 *   field_types = {
 *     "string"
 *   }
 * )
 */
class StringTextFieldColorWidget extends StringTextfieldWidget {

  public static function defaultSettings() {
    return [
      'yellow',
      'green',
    ] + parent::defaultSettings();
  }

  public function settingsForm(array $form, FormStateInterface $form_state) {
    $element = parent::settingsForm($form, $form_state);

    $element['yellow'] = [
      '#type' => 'number',
      '#title' => t('Yellow'),
      '#default_value' => $this->getSetting('yellow'),
      '#required' => TRUE,
      '#min' => 5,
    ];

    $element['green'] = [
      '#type' => 'number',
      '#title' => t('Green'),
      '#default_value' => $this->getSetting('green'),
      '#required' => TRUE,
      '#min' => 10,
    ];

    return $element;
  }

  public function settingsSummary() {
    $summary =  parent::settingsSummary();

    $summary[] = 'Yellow: ' . $this->getSetting('yellow');
    $summary[] = 'Green: ' . $this->getSetting('green');

    return $summary;
  }


  public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
    return parent::formElement($items, $delta, $element, $form, $form_state); // TODO: Change the autogenerated stub
  }


}
