<?php

/**
 * @file
 * Thunder Article install hooks.
 */

use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Extension\MissingDependencyException;

/**
 * Install the thunder article integration.
 */
function thunder_article_install() {
  // Install Shariff integration as soft dependency.
  \Drupal::service('module_installer')->install([
    'shariff',
  ]);
}

/**
 * Update hook dependencies.
 *
 * 1. Dependency on Thunder Updater module.
 *
 * @return mixed
 *   Returns list of update hook dependencies.
 */
function thunder_article_update_dependencies() {

  $installThunderUpdaterHook = ['thunder' => 8103];

  $dependencies['thunder_article'] = [
    8101 => $installThunderUpdaterHook,
  ];

  return $dependencies;
}

/**
 * Enable thunder_paragraphs.
 */
function thunder_article_update_8001() {

  $modules = \Drupal::configFactory()
    ->getEditable('core.extension')
    ->get('module');

  $modules['thunder_paragraphs'] = 1;

  \Drupal::configFactory()
    ->getEditable('core.extension')
    ->set('module', $modules)
    ->save();

}

/*** 81xx Thunder Article update patches ***/

/**
 * Enable shariff module.
 */
function thunder_article_update_8101() {
  /** @var \Drupal\thunder_updater\Updater $thunderUpdater */
  $thunderUpdater = \Drupal::service('thunder_updater');
  $updateLogger = $thunderUpdater->logger();

  $modulesInstalledSuccessfully = TRUE;

  try {
    \Drupal::service('module_installer')->install([
      'config_update',
      'shariff',
    ]);
  }
  catch (MissingDependencyException $e) {
    $updateLogger->warning($e->getMessage());
    $thunderUpdater->checklist()->markUpdatesFailed(['v1_1__shariff']);
    $modulesInstalledSuccessfully = FALSE;
  }

  if ($modulesInstalledSuccessfully) {
    $updateLogger->info(t('Shariff module is successfully installed.'));

    $display = EntityViewDisplay::load('node.article.default');
    if ($display && !$display->getComponent('shariff_field')) {
      $display->setComponent(
        'shariff_field',
        [
          'region' => 'content',
        ]
      )->save();

      $updateLogger->info(t('Shariff field is added for article.'));
      $thunderUpdater->checklist()->markUpdatesSuccessful(['v1_1__shariff'], FALSE);
    }
    else {
      $updateLogger->warning(t('Unable to place shariff field.'));
      $thunderUpdater->checklist()->markUpdatesFailed(['v1_1__shariff']);
    }
  }

  return $updateLogger->output();
}

/**
 * Enable length_indicator module.
 */
function thunder_article_update_8103() {
  /** @var \Drupal\thunder_updater\Updater $thunderUpdater */
  $thunderUpdater = \Drupal::service('thunder_updater');
  $updateLogger = $thunderUpdater->logger();

  $modulesInstalledSuccessfully = TRUE;

  try {
    \Drupal::service('module_installer')->install([
      'config_update',
      'length_indicator',
    ]);
  }
  catch (MissingDependencyException $e) {
    $updateLogger->warning($e->getMessage());
    $thunderUpdater->checklist()->markUpdatesFailed(['thunder_article_update_8102']);
    $modulesInstalledSuccessfully = FALSE;
  }

  if ($modulesInstalledSuccessfully) {
    $updateLogger->info(t('Length Indicator module is successfully installed.'));

    $formDisplay = EntityFormDisplay::load('node.article.default');
    $seoField = $formDisplay->getComponent('field_seo_title');
    if ($formDisplay && $seoField) {
      $seoField['third_party_settings'] = [
        'length_indicator' => [
          'indicator' => TRUE,
          'indicator_opt' => [
            'optimin' => 15,
            'optimax' => 50,
            'tolerance' => 10,
          ],
        ],
      ];
      $formDisplay->setComponent('field_seo_title', $seoField)->save();

      $updateLogger->info(t('Length indicator added to SEO field.'));
      $thunderUpdater->checklist()->markUpdatesSuccessful(['thunder_article_update_8102'], FALSE);
    }
    else {
      $updateLogger->warning(t('Unable to add length indicator to SEO field.'));
      $thunderUpdater->checklist()->markUpdatesFailed(['thunder_article_update_8102']);
    }
  }

  return $updateLogger->output();
}