<?php

/**
 * @file
 * Install, update and uninstall functions for the thunder installation profile.
 */

use Drupal\views\Entity\View;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\metatag\Entity\MetatagDefaults;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Extension\MissingDependencyException;

/**
 * Install the thunder installation profile.
 */
function thunder_install() {

  drupal_get_messages();

  // Enable the admin theme.
  \Drupal::configFactory()
    ->getEditable('node.settings')
    ->set('use_admin_theme', TRUE)
    ->save(TRUE);

  // Set frontend theme.
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'thunder_base')
    ->save(TRUE);

  $profilePath = drupal_get_path('profile', 'thunder');
  \Drupal::configFactory()
    ->getEditable('thunder_base.settings')
    ->set('logo.use_default', FALSE)
    ->set('logo.path', $profilePath . '/themes/thunder_base/images/Thunder-white_400x90.png')
    ->save(TRUE);

  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->roles[] = 'administrator';
  $user->save();

  // Set default pages.
  \Drupal::configFactory()->getEditable('system.site')
    ->set('page.front', '/node')
    ->save(TRUE);

  // Configure user registration.
  \Drupal::configFactory()
    ->getEditable('user.settings')
    ->set('register', 'visitors_admin_approval')
    ->save(TRUE);

  // Disable default media view, cause we have our own.
  View::load('media')->setStatus(FALSE)->save();

  \Drupal::service('thunder_updater')->markAllUpdates();

}

/**
 * Adds metatag configuration.
 */
function thunder_update_8001() {

  \Drupal::service('module_installer')->install([
    'config_update',
    'metatag_open_graph',
    'metatag_twitter_cards',
  ]);

  $configs = [
    'metatag_defaults' => ['node__article'],
    'image_style' => ['twitter', 'facebook'],
  ];

  foreach ($configs as $entity => $ids) {
    foreach ($ids as $id) {
      try {
        \Drupal::service('config_update.config_update')->import($entity, $id);
      }
      catch (EntityStorageException $e) {
      }
    }
  }

  $meta = MetatagDefaults::load('global');
  $tags = $meta->get('tags');
  if (empty($tags['og_site_name'])) {
    $tags['og_site_name'] = '[site:name]';
  }
  if (empty($tags['twitter_cards_type'])) {
    $tags['twitter_cards_type'] = 'summary';
  }
  $meta->set('tags', $tags);
  $meta->save();
}

/**
 * Enable thunder_fia.
 */
function thunder_update_8002() {

  if (\Drupal::moduleHandler()->moduleExists('fb_instant_articles')) {
    $modules = \Drupal::configFactory()
      ->getEditable('core.extension')
      ->get('module');

    $modules['thunder_fia'] = 1;

    \Drupal::configFactory()
      ->getEditable('core.extension')
      ->set('module', $modules)
      ->save();
  }
}

/**
 * Fix metatag config.
 */
function thunder_update_8003() {

  $sandbox = [];
  module_load_include('install', 'metatag');

  metatag_update_8102($sandbox);
  metatag_update_8103();

  // Reset the default field values.
  $entity_manager = \Drupal::service('entity.manager');

  // Get all of the field storage entities of type metatag.
  $field_storage_configs = $entity_manager
    ->getStorage('field_storage_config')
    ->loadByProperties(['type' => 'metatag']);

  foreach ($field_storage_configs as $field_storage) {
    $field_name = $field_storage->getName();

    // Get the individual fields (field instances) associated with bundles.
    /** @var \Drupal\field\Entity\FieldConfig[] $fields */
    $fields = $entity_manager->getStorage('field_config')
      ->loadByProperties(['field_name' => $field_name]);

    foreach ($fields as $field) {

      $field->setDefaultValue(serialize([]));
      $field->save();
    }
  }
}

/**
 * Require instagram and twitter url field.
 */
function thunder_update_8004() {

  $config = FieldConfig::load('media.instagram.field_url');
  if ($config) {
    $config->setRequired(TRUE)->save();
  }

  $config = FieldConfig::load('media.twitter.field_url');
  if ($config) {
    $config->setRequired(TRUE)->save();
  }
}

/**
 * Add author filter to content view.
 */
function thunder_update_8005() {

  /** @var \Drupal\views\Entity\View $view */
  $view = View::load('content');

  if (empty($view->getDisplay('default')['display_options']['filters']['uid'])) {

    $uid['uid'] = [
      'id' => 'uid',
      'table' => 'node_field_data',
      'field' => 'uid',
      'relationship' => 'none',
      'group_type' => 'group',
      'admin_label' => '',
      'operator' => 'in',
      'value' =>
        [],
      'group' => 1,
      'exposed' => TRUE,
      'expose' =>
        [
          'operator_id' => 'uid_op',
          'label' => 'Authored by',
          'description' => '',
          'use_operator' => FALSE,
          'operator' => 'uid_op',
          'identifier' => 'uid',
          'required' => FALSE,
          'remember' => FALSE,
          'multiple' => FALSE,
          'remember_roles' =>
            [
              'authenticated' => 'authenticated',
              'anonymous' => '0',
              'editor' => '0',
              'seo' => '0',
              'administrator' => '0',
            ],
          'reduce' => FALSE,
        ],
      'is_grouped' => FALSE,
      'group_info' =>
        [
          'label' => '',
          'description' => '',
          'identifier' => '',
          'optional' => TRUE,
          'widget' => 'select',
          'multiple' => FALSE,
          'remember' => FALSE,
          'default_group' => 'All',
          'default_group_multiple' =>
            [],
          'group_items' =>
            [],
        ],
      'entity_type' => 'node',
      'entity_field' => 'uid',
      'plugin_id' => 'user_name',
    ];

    $newArray = array_slice($view->getDisplay('default')['display_options']['filters'], 0, 4, TRUE) +
      $uid +
      array_slice($view->getDisplay('default')['display_options']['filters'], 4, NULL, TRUE);

    $view->getDisplay('default')['display_options']['filters'] = $newArray;
    $view->save();
  }

}

/**
 * Adds instagram preview mode.
 */
function thunder_update_8006() {

  \Drupal::service('module_installer')->install([
    'config_update',
  ]);

  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  $configs = [
    'entity_view_display' => ['paragraph.instagram.preview', 'media.instagram.thumbnail'],
  ];

  /** @var Drupal\config_update\ConfigRevertInterface $configReverter */
  $configReverter = \Drupal::service('config_update.config_update');

  // Ensure that required view mode exists.
  if (empty($configReverter->getFromActive('entity_view_mode', 'media.thumbnail'))) {
    $configReverter->import('entity_view_mode', 'media.thumbnail');
  }

  // Import listed configurations.
  foreach ($configs as $entity => $ids) {
    foreach ($ids as $id) {
      try {
        $configReverter->import($entity, $id);
      }
      catch (\Exception $e) {
        $updateLogger->warning(t('Unable to import @entity.@id config.', ['@id' => $id, '@entity' => $entity]));
      }
    }
  }

  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}

/**
 * Installs the responsive_preview module.
 */
function thunder_update_8101() {

  \Drupal::service('module_installer')->install([
    'responsive_preview',
  ]);
}

/**
 * Installs the access_unpublished module.
 */
function thunder_update_8102() {

  \Drupal::service('module_installer')->install([
    'access_unpublished',
  ]);
}

/**
 * Installs the thunder_updater module.
 */
function thunder_update_8103() {

  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  $moduleInstaller = \Drupal::service('module_installer');

  try {
    if (!$moduleInstaller->install(['thunder_updater'])) {
      $updateLogger->warning(t('Unable to enable the Thunder Updater'));
    }
  }
  catch (MissingDependencyException $e) {
    $updateLogger->warning(t('Unable to enable the Thunder Updater because of missing dependencies.'));
  }

  $thunderUpdater = \Drupal::service('thunder_updater');
  $thunderUpdater->markAllUpdates(FALSE);

  // Now Thunder updater is enabled, we can start marking checkboxes.
  $updates = [
    'v1_1__responsive_preview' => 'responsive_preview',
    'v1_1__access_unpublished' => 'access_unpublished',
  ];

  $thunderUpdater->installModules($updates, $updateLogger);

  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}

/**
 * Installs the metatag_facebook module.
 */
function thunder_update_8104() {

  $thunderUpdater = \Drupal::service('thunder_updater');

  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = \Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  $updates = [
    'v1_1__metatag_facebook' => 'metatag_facebook',
  ];

  $thunderUpdater->installModules($updates, $updateLogger);

  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}

/**
 * Installs the config_update module.
 */
function thunder_update_8105() {

  $thunderUpdater = \Drupal::service('thunder_updater');

  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = \Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  $updates = [
    'v1_1__config_update' => 'config_update',
  ];

  $thunderUpdater->installModules($updates, $updateLogger);

  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}

/**
 * Installs the diff module.
 */
function thunder_update_8106() {

  $thunderUpdater = \Drupal::service('thunder_updater');

  /** @var \Drupal\thunder\ThunderUpdateLogger $updateLogger */
  $updateLogger = \Drupal::service('logger.thunder_update');
  $updateLogger->cleanLogs();

  $updates = [
    'v1_1__diff' => 'diff',
  ];

  $thunderUpdater->installModules($updates, $updateLogger);

  if (function_exists('drush_log') && PHP_SAPI === 'cli') {
    $updateLogger->outputDrush();

    return '';
  }

  return $updateLogger->outputHtml();
}
